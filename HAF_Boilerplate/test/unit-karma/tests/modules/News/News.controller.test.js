describe("News.controller", function () {    "use strict";    var $fragments;    beforeEach(function () {        $fragments = $("<div id='fragments'></div>");        $fragments.html("<div id='newsListTemplate'>{{title}}</div><div id='newsDetailTemplate'>{{title}}</div>");        $("body").append($fragments);    });    afterEach(function () {        $fragments.remove();    });    describe(".init", function () {        it("should load template", function () {            var flag = false;            var newsListTemplate = new HAF.Template("newsListTemplate");            spyOn(newsListTemplate, "process");            var newsDetailTemplate = new HAF.Template("newsDetailTemplate");            var newsListController = new APP.controller.NewsList({                inject: {                    templates: {                        newsList: newsListTemplate                    },                    views: {                        newsList: new APP.view.NewsList()                    }                }            });            var newsDetailController = new APP.controller.NewsDetail({                inject: {                    templates: {                        newsDetail: newsDetailTemplate                    },                    views: {                        newsDetail: new APP.view.NewsDetail()                    }                }            });            spyOn(newsDetailTemplate, "process");            var controller = new APP.controller.News({                inject: {                    services: {                        newsList: new APP.service.NewsList(),                        newsDetail: new APP.service.NewsDetail()                    },                    controls: {                        newsList: newsListController,                        newsDetail: newsDetailController                    }                }            });            controller.load();            HAF.messaging.publish("navigationChangedTo:example", {});            runs(function () {                setTimeout(function () {                    expect(newsListTemplate.process).toHaveBeenCalled();                    expect(newsDetailTemplate.process).toHaveBeenCalled();                    flag = true;                }, 500);            });            waitsFor(function () {                return flag;            }, "Should have processed news list and detail template", 600);        });    });    describe(".load", function () {        it("should subscribe to events", function () {            spyOn(HAF.messaging, "subscribe");            var controller = new APP.controller.News();            controller.load();            expect(HAF.messaging.subscribe).toHaveBeenCalledWith(jasmine.any(Object), "navigationChangedTo:example", jasmine.any(Function));            expect(HAF.messaging.subscribe).toHaveBeenCalledWith(jasmine.any(Object), "navigationStateChange:example", jasmine.any(Function));            expect(HAF.messaging.subscribe).toHaveBeenCalledWith(jasmine.any(Object), "navigationChangedFrom:example", jasmine.any(Function));        });        it("should call newsList selectl", function () {            var flag;            var newsList = new APP.controller.NewsList();            var newsDetail = new APP.controller.NewsDetail();            spyOn(newsList, "selectItem");            var controller = new APP.controller.News({                inject: {                    controls: {                        newsList: newsList,                        newsDetail: newsDetail                    },                    services: {                        newsList: new APP.service.NewsList(),                        newsDetail: new APP.service.NewsDetail()                    }                }            });            controller.load();            HAF.messaging.publish("navigationChangedTo:example");            runs(function () {                setTimeout(function () {                    HAF.messaging.publish("navigationStateChange:example", {moduleItem: 1});                    expect(newsList.selectItem).toHaveBeenCalled();                    flag = true;                }, 500);            });            waitsFor(function () {                return flag;            }, "Should have called list and detail methods", 600);        });        it("should call destroy", function () {            var flag;            var newsListController = new APP.controller.NewsList();            var newsDetailController = new APP.controller.NewsDetail();            spyOn(newsListController, "destroy");            spyOn(newsDetailController, "destroy");            var controller = new APP.controller.News({                inject: {                    controls: {                        newsList: newsListController,                        newsDetail: newsDetailController                    }                }            });            controller.load();            HAF.messaging.publish("navigationChangedTo:example");            runs(function () {                setTimeout(function () {                    controller.destroy();                    expect(newsListController.destroy).toHaveBeenCalled();                    expect(newsDetailController.destroy).toHaveBeenCalled();                    flag = true;                }, 500);            });            waitsFor(function () {                return flag;            }, "Should have called list and detail destroy methods", 600);        });    });    describe(".destroy", function () {        it("should call destroy without failure", function () {            var flag;            var controller = new APP.controller.News();            controller.load();            HAF.messaging.publish("navigationChangedTo:example", {});            runs(function () {                setTimeout(function () {                    controller.destroy();                    flag = true;                }, 500);            });            waitsFor(function () {                return flag;            }, "Should have called template methods", 600);        });    });});